version: 0.1
component: build
timeoutInSeconds: 1200
shell: bash

env:
  variables:
    REGISTRY: "mx-queretaro-1.ocir.io"
    NAMESPACE: "axfvmmw9g9lu"
    REPOSITORY: "taskmanager"
    IMAGE_NAME: "file-service"

  exportedVariables:
    - IMAGE_FULL_NAME
    - VERSION

steps:
  - type: Command
    name: "Install Java 17 - Alternative Method"
    timeoutInSeconds: 600
    command: |
      echo "üîß Installing Java 17 using alternative method..."
      
      # M√©todo 1: Usar Amazon Corretto (m√°s confiable que OpenJDK en Oracle Linux)
      cd /opt
      wget -q https://corretto.aws/downloads/latest/amazon-corretto-17-x64-linux-jdk.tar.gz
      tar -xzf amazon-corretto-17-x64-linux-jdk.tar.gz
      
      # Encontrar el directorio correcto
      JAVA17_DIR=$(find /opt -maxdepth 1 -name "amazon-corretto-17*" -type d | head -1)
      echo "Java 17 directory: $JAVA17_DIR"
      
      # Crear symlink para f√°cil acceso
      ln -sf "$JAVA17_DIR" /opt/java17
      
      echo "‚úÖ Java 17 installed successfully"

  - type: Command
    name: "Recreate wallet files from secrets"
    timeoutInSeconds: 300
    command: |
      # Usar el mismo c√≥digo exitoso de GitHub Actions
      mkdir -p wallet oci-keys
      
      # Funci√≥n para obtener secrets
      get_secret() {
        local secret_id=$1
        local output_file=$2
      
        echo "Getting secret for: $(basename $output_file)"
      
        local content=$(oci secrets secret-bundle get --secret-id "$secret_id" --stage LATEST --query 'data."secret-bundle-content".content' --raw-output 2>/dev/null)
        if [ $? -ne 0 ] || [ -z "$content" ]; then
          echo "WARNING: Failed to get secret $secret_id, creating empty file"
          touch "$output_file"
          return 1
        fi
      
        if echo "$content" | base64 -d > "$output_file" 2>/dev/null; then
          echo "‚úÖ Secret decoded for $(basename $output_file)"
        else
          echo "$content" > "$output_file"
          echo "‚úÖ Secret saved for $(basename $output_file)"
        fi
      }
      
      # Recrear wallet files
      get_secret "$WALLET_CWALLET_SSO_OCID" "wallet/cwallet.sso" || true
      get_secret "$WALLET_TNSNAMES_ORA_OCID" "wallet/tnsnames.ora" || true
      get_secret "$WALLET_SQLNET_ORA_OCID" "wallet/sqlnet.ora" || true
      get_secret "$WALLET_EWALLET_P12_OCID" "wallet/ewallet.p12" || true
      get_secret "$WALLET_KEYSTORE_JKS_OCID" "wallet/keystore.jks" || true
      get_secret "$WALLET_OJDBC_PROPERTIES_OCID" "wallet/ojdbc.properties" || true
      get_secret "$WALLET_EWALLET_PEM_OCID" "wallet/ewallet.pem" || true
      get_secret "$WALLET_README_OCID" "wallet/README" || true
      get_secret "$WALLET_TRUSTSTORE_JKS_OCID" "wallet/truststore.jks" || true
      get_secret "$OBJECT_STORAGE_PRIVATE_KEY_OCID" "oci-keys/oci-private-key.pem" || true
      
      chmod 600 wallet/* oci-keys/* 2>/dev/null || true
      
      echo "‚úÖ Wallet files created"
      ls -la wallet/ oci-keys/

  - type: Command
    name: "Modify application.properties"
    timeoutInSeconds: 60
    command: |
      # Usar exactamente el mismo c√≥digo de GitHub Actions
      if [ -f "src/main/resources/application.properties" ]; then
        echo "üîß Modifying application.properties..."
      
        sed -i 's|TNS_ADMIN=C:/Users/cesar/Wallet_TelegramBotDatabase|TNS_ADMIN=/wallet|g' src/main/resources/application.properties
        sed -i 's|oci.private-key-path=${OCI_PRIVATE_KEY_PATH:C:/Users/cesar/ObjectStorageKeys/a01281202@tec.mx_2025-03-22T10_08_12.916Z.pem}|oci.private-key-path=/oci-keys/oci-private-key.pem|g' src/main/resources/application.properties
      
        echo "‚úÖ application.properties modified"
        cat src/main/resources/application.properties
      fi

  - type: Command
    name: "Build with Maven using Java 17"
    timeoutInSeconds: 600
    command: |
      # Configurar Java 17 de forma robusta
      export JAVA_HOME=/opt/java17
      export PATH=$JAVA_HOME/bin:$PATH
      
      echo "‚òï Verifying Java installation:"
      java -version
      javac -version
      echo "üîß JAVA_HOME: $JAVA_HOME"
      echo "üîß PATH: $PATH"
      
      echo "üìã Maven version:"
      mvn -version
      
      echo "üöÄ Building with Maven (same as GitHub Actions)..."
      
      # Usar exactamente el mismo comando que GitHub Actions
      mvn clean package -DskipTests
      
      echo "üì¶ Build completed, checking results:"
      ls -la target/
      
      # Verificaciones adicionales
      if [ ! -f "target/FileService-0.0.1-SNAPSHOT.jar" ]; then
        echo "‚ùå JAR file not found!"
        exit 1
      fi
      
      JAR_SIZE=$(stat -c%s "target/FileService-0.0.1-SNAPSHOT.jar" 2>/dev/null || stat -f%z "target/FileService-0.0.1-SNAPSHOT.jar")
      echo "üì¶ JAR size: $JAR_SIZE bytes"
      
      if [ "$JAR_SIZE" -lt 1000000 ]; then  # Menos de 1MB es sospechoso
        echo "‚ö†Ô∏è JAR seems small for a Spring Boot app"
      fi
      
      echo "‚úÖ Maven build successful!"

  - type: Command
    name: "Prepare Docker build (GitHub Actions style)"
    timeoutInSeconds: 120
    command: |
      # Usar exactamente la misma estructura que GitHub Actions
      mkdir -p build build/wallet build/oci-keys
      
      echo "Copying JAR to build directory..."
      cp target/FileService-0.0.1-SNAPSHOT.jar build/
      
      echo "Copying wallet and keys..."
      cp -r wallet/* build/wallet/ 2>/dev/null || true
      cp -r oci-keys/* build/oci-keys/ 2>/dev/null || true
      
      echo "Creating Dockerfile with alternative base image..."
      cat > Dockerfile << 'EOF'
      # OPCI√ìN 1: Usar Oracle Container Registry (recomendado para OCI)
      FROM container-registry.oracle.com/java/openjdk:17-jre
      
      # OPCI√ìN 2: Si la anterior no funciona, usar Amazon ECR Public
      # FROM public.ecr.aws/amazoncorretto/amazoncorretto:17-jre
      
      # OPCI√ìN 3: Si necesitas una imagen m√°s espec√≠fica, usar Red Hat UBI
      # FROM registry.access.redhat.com/ubi8/openjdk-17-runtime:latest
      
      WORKDIR /app
      
      RUN mkdir -p /wallet /oci-keys
      
      COPY build/FileService-0.0.1-SNAPSHOT.jar /app/app.jar
      COPY build/wallet/ /wallet/
      COPY build/oci-keys/ /oci-keys/
      
      RUN chmod 755 /app/app.jar
      RUN chmod 600 /wallet/* /oci-keys/* 2>/dev/null || true
      
      ENV TNS_ADMIN=/wallet
      ENV ORACLE_HOME=/wallet
      ENV LD_LIBRARY_PATH=/wallet
      ENV OCI_PRIVATE_KEY_PATH=/oci-keys/oci-private-key.pem
      
      EXPOSE 8082
      
      ENTRYPOINT ["java", "-Djava.security.egd=file:/dev/./urandom", "-jar", "/app/app.jar"]
      EOF
      
      echo "‚úÖ Docker build context prepared"
      ls -la build/

  - type: Command
    name: "Build Docker image with retry mechanism"
    timeoutInSeconds: 900
    command: |
      # Generar versi√≥n
      VERSION="$(date +'%Y%m%d-%H%M%S')"
      if [ -d ".git" ]; then
        COMMIT_SHORT=$(git rev-parse --short HEAD 2>/dev/null || echo "unknown")
        VERSION="${VERSION}-${COMMIT_SHORT}"
      fi
      
      IMAGE_TAG="${REGISTRY}/${NAMESPACE}/${REPOSITORY}/${IMAGE_NAME}:${VERSION}"
      echo "üê≥ Building Docker image: ${IMAGE_TAG}"
      
      # Funci√≥n para intentar el build con diferentes im√°genes base
      try_build_with_image() {
        local base_image=$1
        local attempt_name=$2
      
        echo "üîÑ Trying build with ${attempt_name}: ${base_image}"
      
        # Crear Dockerfile temporal con la imagen base especificada
        sed "1s|.*|FROM ${base_image}|" Dockerfile > Dockerfile.tmp
      
        docker build --no-cache -f Dockerfile.tmp -t "${IMAGE_TAG}" . 2>&1
        local result=$?
      
        rm -f Dockerfile.tmp
        return $result
      }
      
      # Lista de im√°genes base alternativas para intentar
      declare -a base_images=(
        "container-registry.oracle.com/java/openjdk:17-jre"
        "public.ecr.aws/amazoncorretto/amazoncorretto:17-jre"
        "registry.access.redhat.com/ubi8/openjdk-17-runtime:latest"
        "ghcr.io/graalvm/jdk:java17"
      )
      
      declare -a image_names=(
        "Oracle Container Registry OpenJDK"
        "Amazon Corretto (ECR Public)"
        "Red Hat UBI OpenJDK"
        "GraalVM JDK"
      )
      
      build_success=false
      
      # Intentar con cada imagen base hasta que una funcione
      for i in "${!base_images[@]}"; do
        if try_build_with_image "${base_images[$i]}" "${image_names[$i]}"; then
          echo "‚úÖ Docker build successful with ${image_names[$i]}!"
          build_success=true
          break
        else
          echo "‚ùå Build failed with ${image_names[$i]}, trying next option..."
          sleep 10  # Esperar un poco antes del siguiente intento
        fi
      done
      
      if [ "$build_success" = false ]; then
        echo "‚ùå All Docker build attempts failed"
        echo "üí° Suggestion: Try again later or configure Docker Hub authentication"
        exit 1
      fi
      
      # Exportar variables
      export IMAGE_FULL_NAME="${IMAGE_TAG}"
      export VERSION="${VERSION}"
      
      echo "üéØ IMAGE_FULL_NAME=${IMAGE_FULL_NAME}"
      echo "üéØ VERSION=${VERSION}"

outputArtifacts:
  - name: file-service-image
    type: DOCKER_IMAGE
    location: ${IMAGE_FULL_NAME}