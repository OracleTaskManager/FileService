version: 0.1
component: build
timeoutInSeconds: 1200
shell: bash

env:
  variables:
    REGISTRY: "mx-queretaro-1.ocir.io"
    NAMESPACE: "axfvmmw9g9lu"
    REPOSITORY: "taskmanager"
    IMAGE_NAME: "file-service"

  exportedVariables:
    - IMAGE_FULL_NAME
    - VERSION

steps:
  - type: Command
    name: "Install Java 17"
    timeoutInSeconds: 600
    command: |
      echo "üîß Installing Java 17..."
      cd /opt
      wget -q https://corretto.aws/downloads/latest/amazon-corretto-17-x64-linux-jdk.tar.gz
      tar -xzf amazon-corretto-17-x64-linux-jdk.tar.gz
      
      JAVA17_DIR=$(find /opt -maxdepth 1 -name "amazon-corretto-17*" -type d | head -1)
      ln -sf "$JAVA17_DIR" /opt/java17
      echo "‚úÖ Java 17 installed successfully"

  - type: Command
    name: "Use ONLY Existing Oracle Versions"
    timeoutInSeconds: 180
    command: |
      echo "üîß ENSURING ONLY REAL/EXISTING ORACLE VERSIONS..."
      
      # Crear backup del pom original
      cp pom.xml pom-original-backup.xml
      
      echo "üìã Current Oracle versions in pom.xml:"
      grep -E "(oracle.*version|ojdbc.*version)" pom.xml || echo "No Oracle version properties found"
      
      # Actualizar SOLO a versiones que existen en Maven Central
      # Basado en la b√∫squeda anterior: 21.9.0.0 existe para todas las librer√≠as
      echo "üöÄ Setting Oracle dependencies to CONFIRMED existing versions..."
      
      # Actualizar versiones Oracle a las que S√ç existen
      sed -i 's|<oracle\.jdbc\.version>.*</oracle\.jdbc\.version>|<oracle.jdbc.version>21.9.0.0</oracle.jdbc.version>|g' pom.xml
      sed -i 's|<oracle\.security\.version>.*</oracle\.security\.version>|<oracle.security.version>21.9.0.0</oracle.security.version>|g' pom.xml
      
      # Si las propiedades no existen, agregarlas
      if ! grep -q "oracle.jdbc.version" pom.xml; then
        echo "Adding Oracle version properties with EXISTING versions..."
        sed -i '/<java.version>17<\/java.version>/a \
        <!-- EXISTING ORACLE VERSIONS IN MAVEN CENTRAL --> \
        <oracle.jdbc.version>21.9.0.0</oracle.jdbc.version> \
        <oracle.security.version>21.9.0.0</oracle.security.version>' pom.xml
      
        # Reemplazar versiones hardcoded con propiedades
        sed -i 's|<version>19\.18\.0\.0</version>|<version>${oracle.jdbc.version}</version>|g' pom.xml
        sed -i 's|<version>23\.2\.0\.0</version>|<version>${oracle.jdbc.version}</version>|g' pom.xml
      fi
      
      echo "‚úÖ POM updated with ONLY existing Oracle versions!"
      echo "üìã Final Oracle versions:"
      grep -E "(oracle.*version)" pom.xml

  - type: Command
    name: "Verify Oracle Dependencies Exist"
    timeoutInSeconds: 120
    command: |
      export JAVA_HOME=/opt/java17
      export PATH=$JAVA_HOME/bin:$PATH
      
      echo "üîç VERIFYING Oracle dependencies can be resolved..."
      
      # Intentar resolver solo las dependencias Oracle para verificar
      mvn dependency:resolve -Dsilent=true | grep oracle || true
      
      if [ $? -eq 0 ]; then
        echo "‚úÖ Oracle dependencies can be resolved"
      else
        echo "‚ö†Ô∏è Some Oracle dependencies might have issues, but continuing..."
      fi

  - type: Command
    name: "Recreate wallet files - SSO ONLY approach"
    timeoutInSeconds: 300
    command: |
      mkdir -p wallet oci-keys
      
      get_secret() {
        local secret_id=$1
        local output_file=$2
        local is_double_encoded=${3:-false}
      
        echo "Getting secret for: $(basename $output_file)"
      
        local content=$(oci secrets secret-bundle get --secret-id "$secret_id" --stage LATEST --query 'data."secret-bundle-content".content' --raw-output 2>/dev/null)
        if [ $? -ne 0 ] || [ -z "$content" ]; then
          echo "‚ùå Failed to get secret $secret_id"
          return 1
        fi
      
        local decoded_once=$(echo "$content" | base64 -d 2>/dev/null)
        if [ $? -ne 0 ]; then
          echo "‚ùå Failed first base64 decode"
          return 1
        fi
      
        if [ "$is_double_encoded" = true ]; then
          local decoded_twice=$(echo "$decoded_once" | base64 -d 2>/dev/null)
          if [ $? -eq 0 ] && [ ! -z "$decoded_twice" ]; then
            echo "$decoded_twice" > "$output_file"
          else
            echo "$decoded_once" > "$output_file"
          fi
        else
          echo "$decoded_once" > "$output_file"
        fi
      
        local file_size=$(wc -c < "$output_file")
        echo "üìè Final file size: $file_size bytes"
        return 0
      }
      
      echo "üîê Processing wallet secrets..."
      
      get_secret "$WALLET_TNSNAMES_ORA_OCID" "wallet/tnsnames.ora" false || true
      get_secret "$WALLET_SQLNET_ORA_OCID" "wallet/sqlnet.ora" false || true  
      get_secret "$WALLET_OJDBC_PROPERTIES_OCID" "wallet/ojdbc.properties" false || true
      get_secret "$OBJECT_STORAGE_PRIVATE_KEY_OCID" "oci-keys/oci-private-key.pem" false || true
      get_secret "$WALLET_CWALLET_SSO_OCID" "wallet/cwallet.sso" true || true
      
      # Configurar sqlnet.ora para m√°xima compatibilidad
      echo "üîß Creating highly compatible sqlnet.ora..."
      cat > wallet/sqlnet.ora << 'EOF'
      WALLET_LOCATION = (SOURCE = (METHOD = file) (METHOD_DATA = (DIRECTORY="/wallet")))
      SSL_SERVER_DN_MATCH=yes
      SQLNET.WALLET_OVERRIDE = TRUE
      SSL_CLIENT_AUTHENTICATION = FALSE
      SQLNET.AUTHENTICATION_SERVICES = (NONE)
      EOF
      
      chmod 600 wallet/* oci-keys/* 2>/dev/null || true
      
      echo "‚úÖ Wallet processing completed"

  - type: Command
    name: "Modify application.properties"
    timeoutInSeconds: 60
    command: |
      if [ -f "src/main/resources/application.properties" ]; then
        echo "üîß Modifying application.properties..."
        sed -i 's|TNS_ADMIN=C:/Users/cesar/Wallet_TelegramBotDatabase|TNS_ADMIN=/wallet|g' src/main/resources/application.properties
        sed -i 's|oci.private-key-path=${OCI_PRIVATE_KEY_PATH:C:/Users/cesar/ObjectStorageKeys/a01281202@tec.mx_2025-03-22T10_08_12.916Z.pem}|oci.private-key-path=/oci-keys/oci-private-key.pem|g' src/main/resources/application.properties
        echo "‚úÖ application.properties modified"
      fi

  - type: Command
    name: "Build with REAL Oracle Library Versions"
    timeoutInSeconds: 600
    command: |
      export JAVA_HOME=/opt/java17
      export PATH=$JAVA_HOME/bin:$PATH
      
      echo "üöÄ Building with REAL/EXISTING Oracle library versions..."
      echo "üìã Final Oracle dependencies that will be used:"
      grep -E "(oracle.*version)" pom.xml
      
      # Build con force update y verbose para debug
      mvn clean package -DskipTests -U -X | head -50 || true
      mvn clean package -DskipTests -U
      
      if [ ! -f "target/FileService-0.0.1-SNAPSHOT.jar" ]; then
        echo "‚ùå JAR file not found!"
        echo "üîç Checking target directory contents:"
        ls -la target/ || echo "Target directory doesn't exist"
        exit 1
      fi
      
      echo "‚úÖ Maven build successful with REAL Oracle versions!"
      
      # Verificar las versiones finales en el JAR
      echo "üîç Oracle library versions in final JAR:"
      unzip -l target/FileService-0.0.1-SNAPSHOT.jar | grep -E "(oraclepki|ojdbc)" | head -3

  - type: Command
    name: "Prepare Docker build"
    timeoutInSeconds: 120
    command: |
      mkdir -p build build/wallet build/oci-keys
      
      cp target/FileService-0.0.1-SNAPSHOT.jar build/
      cp -r wallet/* build/wallet/ 2>/dev/null || true
      cp -r oci-keys/* build/oci-keys/ 2>/dev/null || true
      
      cat > Dockerfile << 'EOF'
      FROM container-registry.oracle.com/graalvm/jdk:17
      
      WORKDIR /app
      
      RUN mkdir -p /wallet /oci-keys
      
      COPY build/FileService-0.0.1-SNAPSHOT.jar /app/app.jar
      COPY build/wallet/ /wallet/
      COPY build/oci-keys/ /oci-keys/
      
      RUN chmod 755 /app/app.jar
      RUN chmod 600 /wallet/* /oci-keys/* 2>/dev/null || true
      
      ENV TNS_ADMIN=/wallet
      ENV ORACLE_HOME=/wallet
      ENV LD_LIBRARY_PATH=/wallet
      ENV OCI_PRIVATE_KEY_PATH=/oci-keys/oci-private-key.pem
      
      RUN echo "=== COMPATIBLE VERSION WALLET VERIFICATION ===" && ls -la /wallet/ && echo "=== SQLNET.ORA CONTENT ===" && cat /wallet/sqlnet.ora
      
      EXPOSE 8082
      
      ENTRYPOINT ["java", "-Djava.security.egd=file:/dev/./urandom", "-Doracle.net.wallet_location=/wallet", "-Doracle.net.tns_admin=/wallet", "-Doracle.jdbc.fanEnabled=false", "-jar", "/app/app.jar"]
      EOF

  - type: Command
    name: "Build and Push Docker image"
    timeoutInSeconds: 900
    command: |
      VERSION="$(date +'%Y%m%d-%H%M%S')"
      if [ -d ".git" ]; then
        COMMIT_SHORT=$(git rev-parse --short HEAD 2>/dev/null || echo "unknown")
        VERSION="${VERSION}-${COMMIT_SHORT}"
      fi
      
      IMAGE_TAG="${REGISTRY}/${NAMESPACE}/${REPOSITORY}/${IMAGE_NAME}:${VERSION}"
      
      # Obtener auth token
      AUTH_TOKEN=$(oci secrets secret-bundle get --secret-id "$AUTH_TOKEN_OCID" --stage LATEST --query 'data."secret-bundle-content".content' --raw-output 2>/dev/null)
      DECODED_TOKEN=$(echo "$AUTH_TOKEN" | base64 -d 2>/dev/null)
      if [ $? -eq 0 ] && [ ! -z "$DECODED_TOKEN" ]; then
        AUTH_TOKEN="$DECODED_TOKEN"
      fi
      
      DOCKER_USERNAME="${NAMESPACE}/a01281202@tec.mx"
      
      echo "${AUTH_TOKEN}" | docker login ${REGISTRY} -u "${DOCKER_USERNAME}" --password-stdin
      
      echo "üöÄ Building Docker image with COMPATIBLE Oracle libraries..."
      docker build --no-cache -t "${IMAGE_TAG}" .
      
      export IMAGE_FULL_NAME="${IMAGE_TAG}"
      export VERSION="${VERSION}"
      
      echo "‚úÖ SUCCESS: Build completed with REAL Oracle versions!"

outputArtifacts:
  - name: file-service-image
    type: DOCKER_IMAGE
    location: ${IMAGE_FULL_NAME}