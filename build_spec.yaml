version: 0.1
component: build
timeoutInSeconds: 1200
shell: bash

env:
  variables:
    REGISTRY: "mx-queretaro-1.ocir.io"
    NAMESPACE: "axfvmmw9g9lu"
    REPOSITORY: "taskmanager"
    IMAGE_NAME: "file-service"

  exportedVariables:
    - IMAGE_FULL_NAME
    - VERSION

steps:
  - type: Command
    name: "Setup Java 17 environment"
    timeoutInSeconds: 300
    command: |
      echo "üîç Current Java version:"
      java -version
      
      echo "üì¶ Installing Java 17..."
      
      # Detectar el gestor de paquetes e instalar Java 17
      if command -v yum >/dev/null 2>&1; then
        echo "Using yum package manager..."
        yum update -y
        yum install -y java-17-openjdk-devel wget
        export JAVA_HOME=/usr/lib/jvm/java-17-openjdk
      elif command -v dnf >/dev/null 2>&1; then
        echo "Using dnf package manager..."
        dnf update -y
        dnf install -y java-17-openjdk-devel wget
        export JAVA_HOME=/usr/lib/jvm/java-17-openjdk
      elif command -v apt-get >/dev/null 2>&1; then
        echo "Using apt package manager..."
        apt-get update
        apt-get install -y openjdk-17-jdk wget
        export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
      else
        echo "‚ùå No package manager found, trying manual installation..."
        cd /opt
        wget -q https://download.java.net/java/GA/jdk17.0.2/dfd4a8d0985749f896bed50d7138ee7f/8/GPL/openjdk-17.0.2_linux-x64_bin.tar.gz
        tar -xzf openjdk-17.0.2_linux-x64_bin.tar.gz
        export JAVA_HOME=/opt/jdk-17.0.2
        cd -
      fi
      
      # Configurar PATH y variables de entorno
      export PATH=$JAVA_HOME/bin:$PATH
      
      # Verificar instalaci√≥n
      echo "‚úÖ Java 17 installed successfully:"
      java -version
      javac -version
      
      echo "üîß JAVA_HOME: $JAVA_HOME"
      echo "üîß PATH: $PATH"
      
      # Guardar variables de entorno para pr√≥ximos steps
      echo "export JAVA_HOME=$JAVA_HOME" >> ~/.bashrc
      echo "export PATH=$JAVA_HOME/bin:\$PATH" >> ~/.bashrc

  - type: Command
    name: "Recreate wallet files from secrets"
    timeoutInSeconds: 300
    command: |
      # Crear directorios
      mkdir -p wallet oci-keys
      
      # Funci√≥n para obtener secrets usando OCI CLI nativo
      get_secret() {
        local secret_id=$1
        local output_file=$2
      
        echo "Getting secret for: $(basename $output_file)"
      
        # Usar OCI CLI con query nativo
        local content=$(oci secrets secret-bundle get --secret-id "$secret_id" --stage LATEST --query 'data."secret-bundle-content".content' --raw-output 2>/dev/null)
        if [ $? -ne 0 ] || [ -z "$content" ]; then
          echo "WARNING: Failed to get secret $secret_id, creating empty file"
          touch "$output_file"
          return 1
        fi
      
        # Intentar decodificar de base64
        if echo "$content" | base64 -d > "$output_file" 2>/dev/null; then
          echo "‚úÖ Secret decoded for $(basename $output_file)"
        else
          echo "$content" > "$output_file"
          echo "‚úÖ Secret saved for $(basename $output_file)"
        fi
      }
      
      # Obtener todos los archivos del wallet
      echo "üìÅ Creating wallet files from secrets..."
      get_secret "$WALLET_CWALLET_SSO_OCID" "wallet/cwallet.sso" || true
      get_secret "$WALLET_TNSNAMES_ORA_OCID" "wallet/tnsnames.ora" || true
      get_secret "$WALLET_SQLNET_ORA_OCID" "wallet/sqlnet.ora" || true
      get_secret "$WALLET_EWALLET_P12_OCID" "wallet/ewallet.p12" || true
      get_secret "$WALLET_KEYSTORE_JKS_OCID" "wallet/keystore.jks" || true
      get_secret "$WALLET_OJDBC_PROPERTIES_OCID" "wallet/ojdbc.properties" || true
      get_secret "$WALLET_EWALLET_PEM_OCID" "wallet/ewallet.pem" || true
      get_secret "$WALLET_README_OCID" "wallet/README" || true
      get_secret "$WALLET_TRUSTSTORE_JKS_OCID" "wallet/truststore.jks" || true
      get_secret "$OBJECT_STORAGE_PRIVATE_KEY_OCID" "oci-keys/oci-private-key.pem" || true
      
      # Configurar permisos
      chmod 600 wallet/* oci-keys/* 2>/dev/null || true
      
      echo "üìã Wallet files created:"
      ls -la wallet/
      echo "üîë OCI keys created:"
      ls -la oci-keys/

  - type: Command
    name: "Modify application.properties"
    timeoutInSeconds: 60
    command: |
      if [ -f "src/main/resources/application.properties" ]; then
        echo "üîß Modifying application.properties..."
      
        # Hacer una copia de respaldo
        cp src/main/resources/application.properties src/main/resources/application.properties.backup
      
        # Aplicar cambios
        sed -i 's|TNS_ADMIN=C:/Users/cesar/Wallet_TelegramBotDatabase|TNS_ADMIN=/wallet|g' src/main/resources/application.properties
        sed -i 's|oci.private-key-path=${OCI_PRIVATE_KEY_PATH:C:/Users/cesar/ObjectStorageKeys/a01281202@tec.mx_2025-03-22T10_08_12.916Z.pem}|oci.private-key-path=/oci-keys/oci-private-key.pem|g' src/main/resources/application.properties
      
        echo "‚úÖ application.properties modified successfully"
        echo "üìÑ New content:"
        cat src/main/resources/application.properties
      else
        echo "‚ö†Ô∏è application.properties not found, skipping modification"
      fi

  - type: Command
    name: "Build with Maven using Java 17"
    timeoutInSeconds: 600
    command: |
      # Detectar y configurar Java 17 DENTRO de este step
      if [ -d "/usr/lib/jvm/java-17-openjdk" ]; then
        export JAVA_HOME=/usr/lib/jvm/java-17-openjdk
      elif [ -d "/usr/lib/jvm/java-17-openjdk-amd64" ]; then
        export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
      elif [ -d "/opt/jdk-17.0.2" ]; then
        export JAVA_HOME=/opt/jdk-17.0.2
      else
        echo "‚ùå Java 17 not found, installing..."
        # Instalar Java 17 si no existe
        if command -v yum >/dev/null 2>&1; then
          yum install -y java-17-openjdk-devel
          export JAVA_HOME=/usr/lib/jvm/java-17-openjdk
        elif command -v apt-get >/dev/null 2>&1; then
          apt-get update && apt-get install -y openjdk-17-jdk
          export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
        fi
      fi

      export PATH=$JAVA_HOME/bin:$PATH

      echo "‚òï Verifying Java 17:"
      java -version
      javac -version
      echo "üîß JAVA_HOME: $JAVA_HOME"

      echo "üìã Maven configuration:"
      mvn -version

      echo "üöÄ Starting Maven build with Java 17..."

      # Maven build SIN fallback - si falla, que falle todo
      mvn clean package -DskipTests \
          -Dmaven.compiler.source=17 \
          -Dmaven.compiler.target=17 \
          -Dmaven.compiler.release=17

      # Verificar que el JAR se cre√≥ correctamente
      if [ ! -f "target/FileService-0.0.1-SNAPSHOT.jar" ]; then
        echo "‚ùå JAR file not created!"
        exit 1
      fi

      # Verificar tama√±o del JAR (debe ser > 1MB para una app Spring Boot)
      JAR_SIZE=$(stat -f%z "target/FileService-0.0.1-SNAPSHOT.jar" 2>/dev/null || stat -c%s "target/FileService-0.0.1-SNAPSHOT.jar")
      echo "üì¶ JAR size: $JAR_SIZE bytes"

      if [ "$JAR_SIZE" -lt 10000 ]; then
        echo "‚ùå JAR is too small ($JAR_SIZE bytes) - likely empty!"
        exit 1
      fi

      # Verificar que contiene la clase principal
      jar tf target/FileService-0.0.1-SNAPSHOT.jar | grep -q "FileServiceApplication.class"
      if [ $? -ne 0 ]; then
        echo "‚ùå Main class not found in JAR!"
        jar tf target/FileService-0.0.1-SNAPSHOT.jar | head -20
        exit 1
      fi

      echo "‚úÖ Maven build successful!"
      echo "üì¶ JAR created with correct size and main class"
      ls -la target/FileService-0.0.1-SNAPSHOT.jar

  - type: Command
    name: "Prepare Docker build context"
    timeoutInSeconds: 120
    command: |
      echo "üìÅ Preparing build context..."
      
      # Crear estructura de directorios
      mkdir -p build/wallet build/oci-keys
      
      # Copiar JAR
      cp target/FileService-0.0.1-SNAPSHOT.jar build/
      echo "‚úÖ JAR copied to build context"
      
      # Copiar wallet files
      if [ "$(ls -A wallet/ 2>/dev/null)" ]; then
        cp -r wallet/* build/wallet/
        echo "‚úÖ Wallet files copied"
      else
        echo "‚ö†Ô∏è No wallet files to copy"
      fi
      
      # Copiar OCI keys
      if [ "$(ls -A oci-keys/ 2>/dev/null)" ]; then
        cp -r oci-keys/* build/oci-keys/
        echo "‚úÖ OCI keys copied"
      else
        echo "‚ö†Ô∏è No OCI keys to copy"
      fi
      
      echo "üìã Build context prepared:"
      ls -la build/

  - type: Command
    name: "Create Dockerfile"
    timeoutInSeconds: 60
    command: |
      echo "üê≥ Creating Dockerfile..."
      
      # Crear Dockerfile
      cat > Dockerfile << 'EOF'
      FROM eclipse-temurin:17-jre
      
      WORKDIR /app
      
      RUN mkdir -p /wallet /oci-keys
      
      COPY build/FileService-0.0.1-SNAPSHOT.jar /app/app.jar
      COPY build/wallet/ /wallet/
      COPY build/oci-keys/ /oci-keys/
      
      RUN chmod 755 /app/app.jar
      RUN chmod 600 /wallet/* /oci-keys/* 2>/dev/null || true
      
      ENV TNS_ADMIN=/wallet
      ENV ORACLE_HOME=/wallet
      ENV LD_LIBRARY_PATH=/wallet
      ENV OCI_PRIVATE_KEY_PATH=/oci-keys/oci-private-key.pem
      
      EXPOSE 8082
      
      ENTRYPOINT ["java", "-Djava.security.egd=file:/dev/./urandom", "-jar", "/app/app.jar"]
      EOF
      
      echo "‚úÖ Dockerfile created successfully"

  - type: Command
    name: "Build Docker image"
    timeoutInSeconds: 900
    command: |
      # Generar versi√≥n √∫nica
      VERSION="$(date +'%Y%m%d-%H%M%S')"
      if [ -d ".git" ]; then
        COMMIT_SHORT=$(git rev-parse --short HEAD 2>/dev/null || echo "unknown")
        VERSION="${VERSION}-${COMMIT_SHORT}"
      fi
      echo "üè∑Ô∏è Generated version: $VERSION"
      
      # Construir tag de imagen
      IMAGE_TAG="${REGISTRY}/${NAMESPACE}/${REPOSITORY}/${IMAGE_NAME}:${VERSION}"
      echo "üê≥ Building Docker image: ${IMAGE_TAG}"
      
      # Construir imagen (sin push - eso lo hace deliver-image)
      docker build --no-cache -t "${IMAGE_TAG}" .
      
      if [ $? -ne 0 ]; then
        echo "‚ùå Docker build failed"
        exit 1
      fi
      
      echo "‚úÖ Docker image built successfully!"
      
      # Exportar variables para deliver-image stage
      export IMAGE_FULL_NAME="${IMAGE_TAG}"
      export VERSION="${VERSION}"
      
      echo "üéØ IMAGE_FULL_NAME=${IMAGE_FULL_NAME}"
      echo "üéØ VERSION=${VERSION}"
      
      echo "============================================"
      echo "‚úÖ BUILD COMPLETED SUCCESSFULLY!"
      echo "üì¶ Image: ${IMAGE_FULL_NAME}"
      echo "üöÄ Ready for deliver-image stage"
      echo "============================================"

outputArtifacts:
  - name: file-service-image
    type: DOCKER_IMAGE
    location: ${IMAGE_FULL_NAME}